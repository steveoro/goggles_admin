%ul.nav.nav-tabs
  = content_tag( :li, link_to(t('admin_import.step_1'), di_step1_status_path()) )
  = content_tag( :li, link_to(t('admin_import.step_1_1'), '#'), class: 'active' )
  = content_tag( :li, link_to(t('admin_import.step_2'), '#'),   class: 'disabled' )
  = content_tag( :li, link_to(t('admin_import.step_3'), '#'),   class: 'disabled' )

.col-xs-12.goggles-category-gap

%p.text-center.lead
  = I18n.t('admin_import.import_event_results_title')
  \:
  \#{I18n.t('admin_import.team_analysis_results')}
  (#{I18n.t('admin_import.session')}: #{@data_import_session.id})

.row.col-xs-12
  .alert.alert-info
    = I18n.t('admin_import.unconfirmed_results_will_be_added')

.row.col-xs-12
  = form_tag( 'step1_1_team_analysis_commit', multipart: true, class: 'form',     |
        onsubmit: "$('#loadingIndicator').show(); " ) do                          |
    = hidden_field_tag( :data_import_session_id, @data_import_session.id )
    = hidden_field_tag( :force_meeting_creation, @force_missing_meeting_creation ? '1' : '0' )
    = hidden_field_tag( :force_team_or_Team_creation, @force_team_or_Team_creation ? '1' : '0' )
    .row.col-xs-12
      %table.table.table-striped.table-bordered.table-hover.table-condensed#history
        %tbody
          %tr.text-center
            %td{ colspan: 2 }
              = I18n.t('admin_import.searched_team')
            %td{ colspan: 2 }
              = I18n.t('admin_import.team_match_name')
            %td
              = I18n.t('admin_import.add_alias')
            %td
              = I18n.t('admin_import.add_team')
            %td
              = I18n.t('admin_import.add_affiliation')
            %td
              = I18n.t('admin_import.is_ok')
          - @analysis_results.each_with_index do |result_row, idx|
            - do_insert_alias = result_row.can_insert_alias
            - do_insert_team = result_row.can_insert_team
            - do_insert_affiliation = result_row.can_insert_affiliation
            %tr
              %td{ colspan: 2 }
                .dropdown
                  %a.dropdown-toggle{ 'data-toggle' => "dropdown", href: "#" }
                    %b="#{result_row.searched_team_name}"
                  %ul.dropdown-menu
                    - if @data_import_session
                      - data_lines = @data_import_session.source_data.split("\r\n")
                      - data_lines = data_lines.map { |line| ( line =~ Regexp.new(result_row.searched_team_name, 'ui') ) ? line[(line =~ /([a-z]+)/i).to_i .. 76] : nil }.compact.uniq
                      - 2.times { data_lines.delete_at(                           |
                          data_lines.find_index( data_lines.last )                |
                        ) } if data_lines && data_lines.size > 2                  |
                      - data_lines.each do |line|
                        %li
                          %pre.imported_Team= line
              %td{ colspan: 2 }
                .form-group
                  = hidden_field( :alias_ids, result_row.id, value: result_row.chosen_team_id )
                  = text_field_tag( "alias_ids_#{ result_row.id }_name",                              |
                      result_row.chosen_team_id ? Team.find(result_row.chosen_team_id).name : nil,    |
                      {autocomplete: 'off', class: "input-sm form-control typeahead",                 |
                      "data-provide"=>"typeahead", placeholder: I18n.t('combobox_3char_tooltip')} )   |
              %td
                = show_tag( do_insert_alias )
              %td
                = show_tag( do_insert_team )
              %td
                = show_tag( do_insert_affiliation )
              %td
                = check_box_tag( "id_#{result_row.id}", '1', do_insert_team )

    .row.col-xs-12.goggles-category-gap
      .col-xs-6
        = I18n.t('admin_import.on_commit_go_back_to_step1')
      .col-xs-1
        = check_box_tag( "must_go_back" )
      .col-xs-1
        = submit_tag( I18n.t('admin_import.confirm'), data: {disable_with: I18n.t(:please_wait), class: 'btn disabled'}, class: 'btn btn-primary' )
      .col-xs-1
        %span#loadingIndicator{hidden: "true"}
          = image_tag( 'indicator.gif' )
        #divProgress.progress.progress-striped.active{hidden: "true"}

:javascript
  /**
   * AJAX response buffer.
   * Stores the actual array of objects returned by the AJAX request.
   */
  var responseTeamNamesBuffer = [];

  /**
   * Datum tokenizer for the Bloodhound suggestion engine.
   * Returns the datum tokenized into a comparable string.
   */
  function tokenizeTeamNameInStep11( datum ) {
    // Extract just the name part:
    // DEBUG
    //console.log( "tokenizeTeamNameInStep11 datum splitted: ", detokenizeTeamNameInStep11(datum) );
    return Bloodhound.tokenizers.obj.whitespace( detokenizeTeamNameInStep11(datum)[0] );
  }

  /**
   * De-tokenizer for composed results.
   * Splits a specified datum using '|' as internal separator for fields.
   * Returns an array of string tokens, in which, allegedly, the order should be:
   * 1. Team#name
   * 2. remote City ID (as a string number), whenever defined
   * 3. remote Team ID (as a string number)
   */
  function detokenizeTeamNameInStep11( datum ) {
    return datum.split("|");
  }

  /**
   * Remote response adapter for the Bloodhound suggestion engine.
   * It is expected to return a list of tokenized names, ready to be compared/matched.
   */
  function transformTeamNamesResponse( data ) {
    // DEBUG
    //console.log( "transformTeamNamesResponse response: ", data );
    // Clear & rebuild the result list and the list of searchable names:
    responseTeamNamesBuffer = [];

    // Since we're bound to return a list of tokenized & comparable strings,
    // we'll store the additional data to display into the same result row,
    // concatenated with a pipe (which we assume is not used for a name).
    for ( idx = 0; idx < data.length; idx++ ) {
      var composedName = data[idx].name + "|" + data[idx].city_id + "|" + data[idx].id;
      responseTeamNamesBuffer.push( composedName );
    };
    // DEBUG
    //console.log( "responseTeamNamesBuffer:", responseTeamNamesBuffer );
    return responseTeamNamesBuffer;
  }

  /**
   * Bloodhound suggestion engine setup.
   */
  var suggestedTeamNames = new Bloodhound({
    datumTokenizer: tokenizeTeamNameInStep11,
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    // Assuming datum is a JSON-ified instance of the entity, this should return its ID:
    //identify: function( datum ){ return datum.id; },
    remote: {
      url:       "#{ json_search_teams_path( q: 'QUERY') }",
      wildcard:  'QUERY',
      transform: transformTeamNamesResponse
    }
  });

  var typeAheadTeamOptions = {
    name:   'Team-names',
    // This is just for the displaying limit for the menu, not the actual returned results:
    limit:  10,
    asynch: true,
    source: suggestedTeamNames,
    // Displayable value for selections:
    display: function( datum ) {
      // Retrieve the individual tokens to get a displayable value:
      var tokens = detokenizeTeamNameInStep11( datum );
      var namePart   = tokens[0];
      return namePart;
    },
    templates: {
      suggestion: function( datum ) {
        var tokens = detokenizeTeamNameInStep11( datum );
        // DEBUG
        //console.log('tokens: ', tokens);
        return '<div>' + tokens[0] + '&nbsp;<i>(city ID: ' + tokens[1] + ')</i></div>'
      }
    }
  };

  // (Wait for the page to be ready)
  $( function() {
    // Define the typeahead callback handlers:
    $(".typeahead").typeahead(
      { minLength: 3, highlight: true },
      typeAheadTeamOptions
    ).bind('typeahead:select', function( ev, suggestion ) {
        // DEBUG
        //console.log('Selection: ', suggestion);
        // Extract the ID part from the combined string:
        var remote_id = detokenizeTeamNameInStep11( suggestion )[2];
        // DEBUG
        //console.log( "remote_id: ", remote_id );
        // Compose the DOM ID of of the hidden form field to be updated:
        $( '#' + ev.target.id.split("_name")[0] ).val( remote_id );
      }
    );
  });
